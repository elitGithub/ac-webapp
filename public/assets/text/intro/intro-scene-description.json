{
    "import": [
        "import TextContainerScene from '../uiScenes/TextContainerScene';",
        "import { TypedOutText } from '../../types/types';",
        "import { BUTTON_FONT_FAMILY, BUTTON_FONT_SIZE, BUTTON_TEXT_COLOR, COLUMNS } from '../../config';",
        "import SceneFactory from '../../Phaser/SceneFactory';",
        "import PhoneScene from '../uiScenes/PhoneScene';",
        "import Phone from '../../state/GameState/Phone';",
        "import { Time } from '../../state/GameState/Time';",
        "import MC from '../../state/GameState/MC';"
    ],
    "class": {
        "class_name": "IntroScene",
        "extends": [
            "SceneFactory"
        ]
    },
    "properties": [
        {
            "property_name": "introTextData!",
            "visibility": "private",
            "type_declaration": "TypedOutText"
        },
        {
            "property_name": "introTextMessages!",
            "visibility": "private",
            "type_declaration": "TypedOutText"
        },
        {
            "property_name": "background!",
            "visibility": "private",
            "type_declaration": "Phaser.GameObjects.Image"
        },
        {
            "property_name": "buttonContainer!",
            "visibility": "private",
            "type_declaration": "Phaser.GameObjects.Container"
        },
        {
            "property_name": "buttonConfig",
            "visibility": "public",
            "type_declaration": "object"
        },
        {
            "property_name": "textContainerScene!",
            "visibility": "private",
            "type_declaration": "TextContainerScene"
        }
    ],
    "methods": [
        {
            "method_name": "preload",
            "visibility": "public",
            "body": [
                "this.load.image('intro-background', '/assets/images/intro/bg.webp');",
                "this.load.json('intro-text', '/assets/text/intro/mc-monologue-intro.json');",
                "this.load.json('intro-text-messages', '/assets/text/intro/intro-text-messages.json');",
                "this.load.image('button-background', '/assets/ui/frame_button.webp');"
            ]
        },
        {
            "method_name": "create",
            "visibility": "public",
            "body": [
                "const { width, height } = this.sys.game.canvas;",
                "this.background = this.add.image(width / 2, height / 2, 'intro-background');",
                "this.background.setDisplaySize(this.scale.width, this.scale.height);",
                "const buttonBackground = this.add.sprite(0, 0, 'button-background');",
                "this.buttonContainer = this.add.container((width / COLUMNS) + width * 0.02, buttonBackground.height);",
                "this.buttonContainer.add(buttonBackground);",
                "const buttonLabel = this.add.text(0, 0, 'Skip intro', this.buttonConfig);",
                "buttonLabel.setOrigin(0.5, 0.5);",
                "buttonLabel.setInteractive();",
                "buttonLabel.setPosition(buttonBackground.x, 0);",
                "buttonLabel.setStroke('#442200', 2);",
                "buttonLabel.setShadow(2, 2, '#442200', 2, false, true);",
                "this.buttonContainer.add(buttonLabel);",
                "this.buttonContainer.setSize(buttonBackground.width, buttonBackground.height);",
                "this.introTextData = this.cache.json.get('intro-text');",
                "this.introTextMessages = this.cache.json.get('intro-text-messages');",
                "this.addEventListeners({ buttonBackground, buttonLabel });",
                "this.textContainerScene = new TextContainerScene(this.introTextData);",
                "this.scene.add('scrolling-text', this.textContainerScene, true);",
                "this.initNewGameStates();"
            ]
        },
        {
            "method_name": "addEventListeners",
            "visibility": "private",
            "arguments": [
                {
                    "name": "button",
                    "type_declaration": "object"
                }
            ],
            "body": [
                "const { buttonBackground, buttonLabel } = button;",
                "buttonLabel.on('pointerover', () => {",
                "  buttonBackground.setTint(0xcccccc);",
                "  this.game.canvas.style.cursor = 'pointer';",
                "});",
                "buttonLabel.on('pointerout', () => {",
                "  buttonBackground.clearTint();",
                "  this.game.canvas.style.cursor = 'default';",
                "});",
                "buttonBackground.on('pointerup', () => {",
                "  this.skipIntroScene(buttonLabel);",
                "});",
                "buttonLabel.on('pointerup', () => {",
                "  this.skipIntroScene(buttonLabel);",
                "});",
                "this.eventsManager.on('text-finished-scrolling', () => {",
                "  const phoneScene = new PhoneScene('text-messages', this.introTextMessages);",
                "  this.scene.add('phoneScene', phoneScene, true);",
                "}, this);"
            ]
        },
        {
            "method_name": "skipIntroScene",
            "visibility": "private",
            "arguments": [
                {
                    "name": "buttonTitle",
                    "type_declaration": "Phaser.GameObjects.Text"
                }
            ],
            "body": [
                "this.eventsManager.emit('skip-intro', []);",
                "this.textContainerScene?.scene.stop();",
                "this.scene.stop('phoneScene');",
                "this.scene.stop('introScene');"
            ]
        },
        {
            "method_name": "initNewGameStates",
            "visibility": "private",
            "body": [
                "this.stateMachine.addState('mc', new MC(this.eventsManager));",
                "this.stateMachine.addState('time', new Time(this.eventsManager));",
                "this.stateMachine.addState('phone', new Phone(this.eventsManager));",
                "this.stateMachine.state.mc.init();",
                "this.stateMachine.state.time.init();",
                "this.stateMachine.state.phone.installPhoneApp({ id: 'sms-app', name: 'sms-app' });",
                "this.stateMachine.state.phone.addPhoneContact({ id: 'hidden_number', name: 'hidden_number', number: '123456789' }, true);",
                "this.stateMachine.state.phone.addPhoneContact({ id: 'jo', name: 'Jo', number: '123456789' }, true);",
                "this.stateMachine.state.phone.addPhoneContact({ id: 'flora', name: 'Flora', number: '123456789' }, true);"
            ]
        }
    ]
}
